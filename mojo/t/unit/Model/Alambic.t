#! perl -I../../lib/

use strict;
use warnings;

use Test::More;
use Data::Dumper;

BEGIN { use_ok('Alambic::Model::Alambic'); }

my $file_conf = "alambic.conf";
my $conf_al;
{
  open(my $fh, "<", $file_conf) or die "Could not open [$file_conf].\n";
  local $/;
  $conf_al = <$fh>;
  close $fh;
}

my $conf_e = eval $conf_al;
my %conf   = (
  "conf_pg_alambic" => $conf_e->{'conf_pg_alambic_test'},
  "alambic_version" => 'alambic-test',
);

SKIP: {
  # If no database is defined, skip all tests.
    my $alambic;

  # Initialise the db.
    my $repodb = Alambic::Model::RepoDB->new($conf{'conf_pg_alambic'});
    my $is_defined = $repodb->is_db_defined();
    note("Initialising database (defined: $is_defined).");
    # If database is not ok, init it.
    # This will fail if the database is already populated.
    $repodb->init_db();
    
  eval { 
      $alambic = Alambic::Model::Alambic->new(\%conf); 
    # If the database was previously populated, then clean it.
    $repodb->init_db();
  };

  if ($@) {
    skip 'Tests irrelevant when no database is defined.', 25;
  }

  isa_ok($alambic, 'Alambic::Model::Alambic');

  my $db_ok = $alambic->is_db_ok();
  ok($db_ok == 1, "Is db ok alambic returns 1.") or diag explain $db_ok;
  my $db_m_ok = $alambic->is_db_m_ok();
  ok($db_m_ok == 0, "Is db minion ok returns 0 (db was not defined).")
    or diag explain $db_m_ok;

  $alambic->instance_name('MyDBNameInit');
  my $conf = $alambic->instance_name();
  is($conf, 'MyDBNameInit', "Instance has correct default name")
    or diag explain $conf;
  $alambic->instance_desc('MyDBDescInit');
  $conf = $alambic->instance_desc();
  is($conf, 'MyDBDescInit', "Instance has correct default desc")
    or diag explain $conf;

  my $version = $alambic->instance_version();
  ok( $version =~ m!^alambic-test$!, "Alambic version is $version, considered ok.") or diag explain $version;

  my $model = $alambic->get_models();
  isa_ok($model, 'Alambic::Model::Models');

  my $repofs = $alambic->get_repo_fs();
  isa_ok($repofs, 'Alambic::Model::RepoFS');

  my $ret = $alambic->delete_project('tools.cdt');
  ok($ret == 1, "Delete project returns 1.") or diag explain $ret;

  # Run a db backup before creating project
  note("Run a db backup before creating project.");
  my $sql = $alambic->backup();
  ok(
    $sql =~ m!DROP TABLE IF EXISTS conf!,
    "SQL backup has drop table for conf."
  ) or diag explain $sql;
  ok(
    $sql =~ m!CREATE TABLE IF NOT EXISTS conf!,
    "SQL backup has create table for conf."
  ) or diag explain $sql;
  ok(
    $sql
      =~ m!INSERT INTO conf \(param, val\)\s*VALUES \('name', !,
    "SQL backup has insert for name."
  ) or diag explain $sql;
  ok(
    $sql
      =~ m!INSERT INTO conf \(param, val\)\s*VALUES \('desc', !,
    "SQL backup has insert for desc."
  ) or diag explain $sql;
  ok($sql !~ /tools.cdt/, "SQL backup has still NOT tools.cdt.")
    or diag explain $sql;

  note("Create empty project from Alambic.");
  my $project = $alambic->create_project('tools.cdt', 'Tools CDT');
  isa_ok($project, 'Alambic::Model::Project');
  ok($project != 0, "Project creation went well (!= 0).")
    or diag explain $project;

  my $project_id = $project->get_id();
  ok($project_id =~ m!^tools.cdt$!,
    'Project generated by Alambic has correct id.')
    or diag explain $project_id;

  my $project_name = $project->name();
  ok($project_name =~ m!^Tools CDT$!,
    'Project generated by Alambic has correct name.')
    or diag explain $project_name;

  $project = $alambic->get_project('tools.cdt');
  isa_ok($project, 'Alambic::Model::Project');

  $project_id = $project->get_id();
  ok($project_id =~ m!^tools.cdt$!,
    'Project retrieved by Alambic has correct id.')
    or diag explain $project_id;

  $project_name = $project->name();
  ok($project_name =~ m!^Tools CDT$!,
    'Project retrieved by Alambic has correct name.')
    or diag explain $project_name;

  my $plugins      = $alambic->get_plugins();
  my $plugins_list = $plugins->get_list_plugins_pre();
  my $pv           = 4;
  ok(scalar @{$plugins_list} == $pv, "Plugins pre list has $pv entries.")
    or diag explain $plugins_list;
  ok(grep(/^EclipsePmi$/, @{$plugins_list}) == 1, "Plugins pre list has EclipsePmi.")
    or diag explain $plugins_list;
  ok(grep(/^Hudson$/, @{$plugins_list}) == 1, "Plugins pre list has Hudson.")
    or diag explain $plugins_list;
  ok(grep(/^PmdAnalysis$/, @{$plugins_list}) == 1, "Plugins pre list has PmdAnalysis.")
    or diag explain $plugins_list;
  ok(grep(/^StackOverflow$/, @{$plugins_list}) == 1, "Plugins pre list has StackOverflow.")
    or diag explain $plugins_list;

  my $projects_list = $alambic->get_projects_list();
  ok($projects_list->{'tools.cdt'} =~ m!^Tools CDT$!,
    "Projects list contains Tools CDT.")
    or diag explain $projects_list;

  $alambic->add_project_plugin('tools.cdt', 'EclipsePmi');
  note("Run project_plugin from Alambic.");
  $ret = $alambic->run_plugins('tools.cdt');
  ok(scalar(keys %$ret) == 4, "Run plugins.") or diag explain $ret;

  note("Run project from Alambic.");
  $ret = $alambic->run_project('tools.cdt');

  # 4 is when attributes are not defined (i.e. typically when the script is run by itself)
  # 6 when attributes are defined (i.e. when all tests are run in docker).
  my $k = scalar(keys %$ret);
  ok(($k == 6) || ($k == 4),
    "Adding run_project returns hash with 4 or 6 entries.")
    or diag explain keys %$ret;

  # Restore previous backup and make sure the created project is not there.
  $alambic->restore($sql);
  $project = $alambic->get_project('tools.cdt');
  is($project, undef, "Get project tools.cdt returns undef after restore.");

  # Now restore a backup to test history
  note("Restoring database with Sirius history.");
  my $file_sql = 'alambic_backup_201707290902.sql';
  $sql    = $repofs->read_backup($file_sql);
  $alambic->restore($sql);
  my $hist = $alambic->get_project_hist('modeling.sirius');
  ok( scalar(@$hist) == 3, "History has 3 items after restore.") 
      or diag explain $hist;
  ok( $hist->[2]{'run_delay'} == 47, "First item in history has run_delay 47.") 
      or diag explain $hist;
  ok( $hist->[2]{'id'} == 1, "First item in history has id 1.") 
      or diag explain $hist;
  ok( $hist->[2]{'run_time'} =~ m!^2017-07-29!, "First item in history has correct run_time.") 
      or diag explain $hist->[2];

    my $run = $alambic->get_project_last_run('modeling.sirius');
    
  ok( $run->{'run_delay'} == 49, 
      "Last run has correct run_delay from backup.") 
      or diag explain $run;
  ok( $run->{'metrics'}{'CI_JOBS_RED'} == 8, 
      "Last run has correct metric CI_JOBS_RED from backup.") 
      or diag explain $run;
  ok( $run->{'info'}{'PMI_ID'} =~ m!^modeling.sirius$!, 
      "Last run has correct info PMI_ID from backup.") 
      or diag explain $run;
  ok( $run->{'recs'}[0]{'rid'} =~ m!^PMI_EMPTY_TITLE$!, 
      "Last run has correct rec PMI_EMPTY_TITLE from backup.") 
      or diag explain $run;
  ok( $run->{'project_id'} =~ m!^modeling.sirius$!, 
      "Last run has correct project_id from backup.") 
      or diag explain $run;
  ok( $run->{'id'} == 3, 
      "Last run has correct id from backup.") 
      or diag explain $run;
  ok( $run->{'run_time'} =~ m!^2017-07-29!, 
      "Last run has correct run_time from backup.") 
      or diag explain $run;
  ok( $run->{'run_user'} =~ m!^administrator$!, 
      "Last run has correct run_user from backup.") 
      or diag explain $run;
    
}

done_testing();
