
<!--begin.rcode, echo=FALSE, message=FALSE

file.main = paste("", project.id, "_pmd_analysis_main.csv", sep="")
file.violations = paste("", project.id, "_pmd_analysis_violations.csv", sep="")
file.rules = paste("", project.id, "_pmd_analysis_rules.csv", sep="")
file.files = paste("", project.id, "_pmd_analysis_files.csv", sep="")

library(knitr)

opts_chunk$set(fig.width=5, fig.height=5, echo=F,
               fig.path = paste( 'figures/', plugin.id, '/', project.id, '/', sep=""))
opts_knit$set(progress = TRUE, verbose = TRUE, self.contained=T)

require(ggplot2)
require(xtable)

priority.colours <- c("#CC0000", "#DD5500", "#EEAA00", "#FFCC66")

pmd.main <- read.csv(file=file.main, header=T)
pmd.rules <- read.csv(file=file.rules, header=T)
pmd.violations <- read.csv(file=file.violations, header=T)
pmd.files <- read.csv(file=file.files, header=T)

end.rcode-->

<h2>PMD Results analysis for <!--rinline I(project.id) --></h2>

<div class="row">

    <div class="col-sm-7">
        <p><a href="http://pmd.sourceforge.net">PMD</a> is a great and widely-used source code analyzer which finds common programming flaws and bad coding practices in source code projects. This document intends to help users make a better use of this helpful tool, by proposing <a href="#improve-project">simple yet effective corrective actions</a> to improve the project quality according to PMD XML results. </p>
        <ul>
            <li>The quick summary helps users <a href="#summary">understand the reports</a> generated by the tool</li>
            <li>The <a href="#improve-project-files">fix by files</a> section lists files that sould be fixed, given their number of high-priority violations.</li>
            <li>The <a href="#improve-project-rules">fix by rules</a> section proposes to acquire and secure practices by fixing violations for high-priority, yet actionable rules to improve the project quality.</li>
        </ul>

        <p>The version of PMD used is <!--rinline pmd.main$PMD.version[1] --> and the PMD run was executed on the <!--rinline as.POSIXct(pmd.main$Timestamp[1], format="%Y-%m-%dT%H:%M:%S") -->. You can learn more about this module on its <a href="https://bitbucket.org/BorisBaldassari/alambic/wiki/Plugins/PMD%20Analysis">documentation page</a> on the <a href="https://bitbucket.org/BorisBaldassari/alambic/wiki/">project wiki</a>. </p>

    </div>
    <div class="col-sm-4">
        <div class="panel panel-success">
            <!-- Default panel contents -->
            <div class="panel-heading"><h3 class="panel-title">Contents</h3></div>

            <div class="list-group">
              <a href="#summary" class="list-group-item">Quick Summary</a>
              <a href="#improve-project-files" class="list-group-item">Fix by files</a>
              <a href="#improve-project-rules" class="list-group-item">Fix by rules</a>
              <!-- a href="#download" class="list-group-item">Download data</a -->
            </div>
        </div>
    </div>
</div>

<hr />

<h3 id="summary">Quick Summary</h3>

<div class="row">
    <div class="col-sm-6">
        <p>PMD raised a total of <!-- rinline sum(pmd.main$NCC) --> violations to checked rules, including:
        <ul>
        <li><!-- rinline sum(pmd.files$NCC_1) --> with <span style="color: #CC0000">priority 1</span>,</li>
        <li><!-- rinline sum(pmd.files$NCC_2) --> with <span style="color: #DD5500">priority 2</span>,</li>
        <li><!-- rinline sum(pmd.files$NCC_3) --> with <span style="color: #EEAA00">priority 3</span></li>
        <li><!-- rinline sum(pmd.files$NCC_4) --> with <span style="color: #FFCC66">priority 4</span>. </p>
        </ul>

    <p><strong>Rules</strong> can be considered as <em>coding practices</em>. They represent what the community believes to be right or wrong, althougth it heavily depends on your own context. In this very case:</p>
        <ul>
            <li>A total of <!-- rinline sum(pmd.main$RULES) --> rules have been checked.</li>
            <li>The analysis found <!-- rinline sum(pmd.main$RKO) --> broken rules, and <!-- rinline sum(pmd.main$ROK) --> respected rules.</li>
            <li>So the rate of <strong>acquired practices</strong> is <!-- rinline round(sum(pmd.main$ROKR), digits=1) --> %.</li>
        </ul>

    </div>

    <div class="col-sm-6">

    <p>This plot shows the proportion of rules violated (<span class="label" style="background-color: #CC0000">NOK: red</span>) and clean (<span class="label" style="background-color: #325d88">OK: blue</span>). The lightness decreases with the priority (P1 -> p4).</p>

<!--begin.rcode summary-pie-gvis, results='asis', message=F

suppressPackageStartupMessages(library(googleVis))
options(gvis.plot.tag='chart')

pmd.rules.ok <- pmd.rules[,c(1,2)]
pmd.rules.ok$Priority <- paste("P", pmd.rules$Priority, " OK", sep="")
names(pmd.rules.ok) <- c("Rules", "Vol")

pmd.rules.nok <- pmd.rules[,c(1,3)]
pmd.rules.nok$Priority <- paste("P", pmd.rules$Priority, " NOK", sep="")
names(pmd.rules.nok) <- c("Rules", "Vol")

pmd.rules.sorted <- rbind(pmd.rules.ok, pmd.rules.nok)

p <- gvisPieChart(pmd.rules.sorted, options = list(
      title="Rules checked",
      colors="['#325d88', '#5B7DA0', '#849EB8', '#ADBECF', '#CC0000', '#DD5500', '#EEAA00', '#FFCC66']",
      width=500, height=350,
      pieHole= 0.4))

print(p, 'chart')

end.rcode -->

    </div>
</div>

<hr />

<h3 id="improve-project">Improving your project</h3>

<p>Once you have selected the right rules, and made sure you understand them, then you should strive to keep the number of violations low, or even null. For each violation, you should either <strong>fix it</strong> or <strong>acknowledge it</strong>. As you will see, there will always be cases where the rule is smart, but doesn't apply to a specific instance in your code -- because there is simply no bullet-proof generic truth. But once you know the rules, you know when to bend them, and it is ok: PMD allows you to <a href="http://pmd.sourceforge.net/suppressing.html">ignore or suppress the incriminated warnings</a> if you know what you are doing.</p>

<p>There are a few things to keep in mind when using PMD to improve your code:
<ul>
<li>Improve the rate of acquired practices.</li>
<li>Reduce the number of violations.</li>
<li>For rules that you want to apply, but that show too many violations, at least don't let them grow up.</li>
</ul>
</p>

<p>From there, the next practical thing to do is either to:
<ul>
<li>Work on files: select a few files that have a lot of violations, and fix all important violations (e.g. with priority 1 and 2).</li>
<li>Work on practices: select a few rules with a high priority and a low number of violations, so you can make sure that the corresponding practices are acquired. Then you should pay attention to not let them appear again.</li>
</ul>
</p>

<h4 id="improve-project-files">Fixing files with high-priority violations</h4>

<!--begin.rcode

pmd.files.ncc12 <- pmd.files[pmd.files$NCC_1 > 0 | pmd.files$NCC_2 > 0,]

pmd.files.ncc1.ncc <- sum(pmd.files.ncc12[,c("NCC_1")])
pmd.files.ncc2.ncc <- sum(pmd.files.ncc12[,c("NCC_2")])
pmd.files.ncc12.ncc <- pmd.files.ncc1.ncc + pmd.files.ncc2.ncc

pmd.files.ncc1.ncf <- nrow(pmd.files[pmd.files$NCC_1 > 0,])
pmd.files.ncc2.ncf <- nrow(pmd.files[pmd.files$NCC_2 > 0,])
pmd.files.ncc12.ncf <- nrow(pmd.files.ncc12)

end.rcode-->


<div class="row">
    <div class="col-lg-5">

    <p>You should start with files that have a lot of high-priority violations. The current analysis unveils:
    <ul>
    <li><!-- rinline pmd.files.ncc12.ncc --> violations with priority <span style="color: #CC0000">1</span> or <span style="color: #DD5500">2</span>, distributed in <!-- rinline pmd.files.ncc12.ncf --> files. Those are further decomposed in:</li>
    <li><!-- rinline pmd.files.ncc1.ncc --> violations with <span style="color: #CC0000">priority 1</span>, distributed in <!-- rinline pmd.files.ncc1.ncf --> files, and </li>
    <li><!-- rinline pmd.files.ncc2.ncc --> violations with <span style="color: #DD5500">priority 2</span>, distributed in <!-- rinline pmd.files.ncc2.ncf --> files.</li>
    </ul></p>

    <p>The table on the right shows the <em>10 top files with high-priority violations</em>. NCC P1 is the number of violations with priority 1 in the file, and NCC P2 is the number of violation with priority 2 in the file. Fixing them would be a good start. When you are over, re-run the analysis and fix the 10 next, until all high-priority violations are fixed.</p>

    </div>
    <div class="col-lg-7">

<!--begin.rcode files-list-ncc12, results='asis'

pmd.files.list <- pmd.files[pmd.files$NCC_1 > 0 | pmd.files$NCC_2 > 0,c("File", "NCC_1", "NCC_2")]

mystr <- as.character(pmd.files.list$File)
pmd.files.list$File <- paste("...", substr(pmd.files.list[,1], start=nchar(mystr)-60, nchar(mystr)), sep="")
rm(mystr)

pmd.files.list$NCC_12 <- pmd.files.list$NCC_1 + pmd.files.list$NCC_2
pmd.files.list <- pmd.files.list[order(pmd.files.list$NCC_12, pmd.files.list$NCC_1, decreasing=T),-4]

pmd.files.list.10 <- head(pmd.files.list, n=10)

names(pmd.files.list.10) <- c("File", "NCC P1", "NCC P2")

print(xtable(pmd.files.list.10,
            caption = 'Files with a high number of high-priority violations.'), type="html",
    html.table.attributes='class="table table-striped"',
    include.rownames=FALSE)

end.rcode-->

    </div>
</div>


<!--begin.rcode files-ncc1, dev='svg', fig.width=12, fig.height=7, dev.args=list(bg='transparent'), out.extra='class="img-responsive" width="100%"', eval=TRUE, warning=FALSE

pmd.files.list.50 <- head(pmd.files.list, n=30)

pmd.files.ncc1 <- pmd.files.list.50[,c(1,2)]
pmd.files.ncc1$Priority <- 1
names(pmd.files.ncc1) <- c("File", "NCC", "Priority")

pmd.files.ncc2 <- pmd.files.list.50[,c(1,3)]
pmd.files.ncc2$Priority <- 2
names(pmd.files.ncc2) <- c("File", "NCC", "Priority")

pmd.files.ncc <- rbind(pmd.files.ncc1, pmd.files.ncc2)

#myfiles <- gregexpr(pattern ='[/\\]', pmd.files.ncc$File)
myfiles <- lapply(
    X=as.vector(pmd.files.ncc$File),
    FUN=function(x) tail(gregexpr(pattern ='/', text=x)[[1]], n=1)
)

pmd.files.ncc$File <- paste("...", substr(pmd.files.ncc$File, start=myfiles, stop=nchar(pmd.files.ncc$File)), sep="")
rm(myfiles)

ggplot(pmd.files.ncc, aes(x=reorder(File, -NCC), y=NCC, fill=factor(Priority))) +
    geom_bar(stat="identity") +
    scale_fill_manual(values=priority.colours) +
    labs(fill='Priority') +
    xlab("Files") +
    ylab('Non-conformities') +
    theme(
        panel.background = element_rect(fill = "transparent",colour = NA),
        plot.background = element_rect(fill = "white",colour = NA),
        axis.text.x = element_text(angle=30, hjust=1, vjust=1, size=11))

end.rcode-->

<h4 id="improve-project-rules">Fixing rules to improve practices</h4>

<!--begin.rcode top_5_rules_compute

myrules_list <- pmd.violations[pmd.violations$vol < 50 & ( pmd.violations$priority == 1 | pmd.violations$priority == 2 ),c(1,2,4)]

end.rcode-->

<p>Another approache is to work on practices acquisition: <strong>select a few rules</strong> that you consider as really important, with <em>an actionable number of violations</em>, and <strong>fix them wherever they appear</strong>. The current analysis has <!-- rinline nrow(myrules_list) --> rules with priority 1 or 2 that show less than 50 violations. The graphic below on the left shows the 5 top rules with a low number of violations and a priority with either 1 or 2. The table on the rigth provides the corresponding data.</p>


<div class="row">
    <div class="col-lg-6">

<!--begin.rcode top_5_rules, dev='svg', fig.width=10, fig.height=7, dev.args=list(bg='transparent'), out.extra='class="img-responsive"'

myrules <- pmd.violations[pmd.violations$priority == 1 | pmd.violations$priority == 2,c(1,2,4)]
myrules5 <- head(myrules[order(myrules$vol),], n=5)

ggplot(myrules5, aes(x=reorder(Mnemo, vol), y=vol, fill=factor(priority))) +
    geom_bar(stat='identity') +
    geom_text(aes(label=vol), vjust=-0.2, size=4) +
    scale_fill_manual(values=priority.colours) +
    labs(fill='Priority') +
    xlab("") +
    ylab('Non-conformities') +
    theme(
        panel.background = element_rect(fill = "transparent",colour = NA),
        plot.background = element_rect(fill = "white",colour = NA),
        axis.text.x = element_text(angle=30, hjust=1, vjust=1, size=12))

end.rcode-->

    </div>
    <div class="col-lg-6">

<!--begin.rcode top_5_rules_list, results='asis'

print(xtable(myrules5,
            caption = 'High-priority rules with a low number of violations'), type="html",
    html.table.attributes='class="table table-striped"',
    include.rownames=FALSE)

end.rcode-->

    </div>
</div>

<hr />

<!-- h3 id="downloads">Downloads</h3>

<p>The visualisations used in this document rely on a number of flat CSV data files, that were extracted from the PMD XML results file. You can download them to play with if you want to. They are:</p>
<ul>
<li>Generic information about the project : PMD version, timestamp of analysis, number of non-conformities, number of rules checked, number of rules violated, number of rules clean, rate of acquired practices. [ <a href="<!--rinline I(file.main) -->">Download</a> ]</li>
<li>Rules: number of non-conformities for each category of rules and priority. [ <a href="<!--rinline I(file.rules) -->">Download</a> ].</li>
<li>Violations: foreach violated rule, its priority, the ruleset it belongs to, and the volume of violations. [ <a href="<!--rinline I(file.violations) -->">Download</a> ]</li>
<li>Files: for each non-conform file, its name, total number of non-conformities, number of non-conformities for each priority, number of broken and clean rules, and the rate of acquired practices. [ <a href="<!--rinline I(file.files) -->">Download</a> ]</li>
</ul -->

<br />
