package Alambic::Plugins::GitHubProject;

use strict; 
use warnings;

use Alambic::Model::RepoFS;
use Alambic::Tools::R;

use Net::GitHub;
use Mojo::JSON qw( decode_json encode_json );
use Text::CSV;
use Data::Dumper;

# Main configuration hash for the plugin
my %conf = (
    "id" => "GitHubProject",
    "name" => "GitHub Project",
    "desc" => [
	'This plugin retrieves information about a project from a GitHub server.',
    ],
    "type" => "pre",
    "ability" => [ 'data', 'info', 'metrics', 'viz', 'users' ],
    "params" => {
        "github_url" => "The URL of the GitHub instance, e.g. http://mygithub.mycompany.com. Leave empty to use github.com",
        "github_user" => "The GitHub user the repository belongs to.",
        "github_repo" => "The GitHub repository to be analysed.",
        "github_token" => "The private token used to access the GitHub instance. The private token must be generated by a user who has global rights on the analysed projects. It is generated, downloaded and reset from the user's settings page (Developer settings). https://docs.github.com/en/free-pro-team/github/authenticating-to-github/creating-a-personal-access-token .",
    },
    "provides_cdata" => [
    ],
    "provides_info" => [
      "PROJECT_ID",
      "PROJECT_URL",
      "PROJECT_ISSUES_ENABLED",
      "PROJECT_ISSUES_URL",
      "PROJECT_WIKI_ENABLED",
      "PROJECT_WIKI_URL",
      "PROJECT_WEB_ENABLED",
#      "PROJECT_WEB_URL",
      "PROJECT_DL_ENABLED",
      "PROJECT_DL_URL",
      "PROJECT_LICENCE",
      "PROJECT_REPO_SSH",
      "PROJECT_REPO_GIT",
      "PROJECT_REPO_HTTP",
      "PROJECT_OWNER_ID",
      "PROJECT_OWNER_NAME",
      "PROJECT_PRIVATE",

      "PROJECT_COMMITS_URL",
      
#      "PROJECT_PRS_ENABLED",
#      "PROJECT_PRS_URL",

      "PROJECT_CREATED_AT",
      "PROJECT_LAST_ACTIVITY_AT",
    ],
    "provides_data" => {
	"import_github_project.json" => "Original information provided on the repository (JSON).",
	"import_github_project_contributors.json" => "Original list of contributors to the repository, as retrieved from the Github server (JSON).",
	"import_github_project_events.json" => "Original list of events for the repository, as retrieved from the Github server  (JSON). Only events created within the past 90 days are included.",
	"import_github_project_languages.json" => "Original list of languages found in repository, as retrieved from the Github server (JSON).",
	"import_github_project_tags.json" => "Original list of tags found in repository, as retrieved from the Github server (JSON).",
	"import_github_project_commits_hourly.json" => "Original list of hourly commits (aka punch card) found in repository, as retrieved from the Github server (JSON). See https://developer.github.com/v3/repos/statistics/#get-the-hourly-commit-count-for-each-day.",
	"import_github_project_commits_weekly.json" => "Original list of weekly commits (aka participation) found in repository, as retrieved from the Github server (JSON). See https://developer.github.com/v3/repos/statistics/#get-the-weekly-commit-count.",

	"github_project_languages.csv" => "List of languages and their associated count for the repository (CSV).",
	"github_project_tags.csv" => "List of tags and their associated count for the repository (CSV).",
	"github_project_commits_hourly.csv" => "Number of commits per day and per hour, as reported in GitHub's punch card (CSV).",
	"github_project_commits_weekly.csv" => "Number of commits per week, as reported in GitHub's punch card (CSV).",

	"metrics_github_project.csv" => "All metrics computed by the Github Project plugin (CSV).",
	"metrics_github_project.json" => "All metrics computed by the Github Project plugin (JSON).",
	"info_github_project.csv" => "All information computed by the Github Project plugin (CSV).",
    },
    "provides_metrics" => {
        "PROJECT_ISSUES_OPEN" => "PROJECT_ISSUES_OPEN", 
        "PROJECT_FORKS"       => "PROJECT_FORKS", 
        "PROJECT_STARGAZERS"       => "PROJECT_STARGAZERS", 
        "PROJECT_WATCHERS"       => "PROJECT_WATCHERS", 
    },
    "provides_figs" => {
      'github_languages_pie.html' => 'Pie chart of all languages detected in the repository.',
      'github_contributors_pie.html' => 'Pie chart of all contributors to the repository.',
    },
    "provides_recs" => [
    ],
    "provides_viz" => {
        "github_project.html" => "GitHub Project",
    },
);


# Constructor
sub new {
    my ($class) = @_;
    
    return bless {}, $class;
}


sub get_conf() {
    return \%conf;
}


# Run plugin: retrieves data + compute_data 
sub run_plugin($$) {
    my ($self, $project_id, $conf) = @_;
    
    my %ret = (
	'metrics' => {},
	'info' => {},
	'recs' => [],
	'log' => [],
	);

    # Create RepoFS object for writing and reading files on FS.
    my $repofs = Alambic::Model::RepoFS->new();

    my $gh_url = $conf->{'github_url'} || 'https://api.github.com';
    my $gh_user = $conf->{'github_user'};
    my $gh_repo = $conf->{'github_repo'};
    my $gh_token = $conf->{'github_token'};

    push( @{$ret{'log'}}, "[Plugins::GitHubProject] Targeting data from [$gh_url] for project [$gh_user/$gh_repo]." ); 

    # Create Github API object for all rest operations.
    my $gh;
    if ($gh_token !~ m!^$!) { 
        push( @{$ret{'log'}}, "[Plugins::GitHubProject] Using access token." );
        $gh = Net::GitHub::V3->new(
          access_token => $gh_token,
          api_url => "$gh_url",
        );
    } else {
        push( @{$ret{'log'}}, "[Plugins::GitHubProject] Using anonymous access." );
        $gh = Net::GitHub::V3->new(
          api_url => "$gh_url",
        );
    }
    $gh->set_default_user_repo("$gh_user", "$gh_repo");

    # Project ###############################################

    # Request general information about this project
    push( @{$ret{'log'}}, "[Plugins::GitHubProject] Retrieving Repository data." ); 
    my $project;
    eval { $project = $gh->repos->get; };
    if ($@) {
        push( @{$ret{'log'}}, "[Plugins::GitHubProject] ERROR: Failed to get data from server." );
        return \%ret;    
    }

    # Write project info to json file.
    $repofs->write_input($project_id, "github_project.json",
			  encode_json($project));
    
    # Get the metrics (mainly numbers, that usually evolve)
    $ret{'metrics'}{'PROJECT_FORKS'} = $project->{'forks_count'} || 0;
    $ret{'metrics'}{'PROJECT_STARGAZERS'} = $project->{'stargazers_count'} || 0;
    $ret{'metrics'}{'PROJECT_WATCHERS'} = $project->{'subscribers_count'} || 0;
    $ret{'metrics'}{'PROJECT_ISSUES_OPEN'} = $project->{'open_issues_count'} || 0;

    $ret{'info'}{'PROJECT_ID'} = $project->{'id'} || 0;
    $ret{'info'}{'PROJECT_CREATED_AT'} = $project->{'created_at'};
    $ret{'info'}{'PROJECT_LAST_ACTIVITY_AT'} = $project->{'updated_at'};
    $ret{'info'}{'PROJECT_OWNER_ID'} = $project->{'owner'}{'id'} || 0;
    $ret{'info'}{'PROJECT_OWNER_NAME'} = $project->{'owner'}{'login'} || 0;

    $ret{'info'}{'PROJECT_ISSUES_ENABLED'} = $project->{'has_issues'} || '';
    $ret{'info'}{'PROJECT_DL_ENABLED'} = $project->{'has_downloads'} || '';
    $ret{'info'}{'PROJECT_WEB_ENABLED'} = $project->{'has_pages'} || '';
    $ret{'info'}{'PROJECT_WIKI_ENABLED'} = $project->{'has_wiki'} || '';

    $ret{'info'}{'PROJECT_URL'} = $project->{'html_url'} || '';
    $ret{'info'}{'PROJECT_ISSUES_URL'} = $ret{'info'}{'PROJECT_URL'} . "/issues";
    $ret{'info'}{'PROJECT_COMMITS_URL'} = $ret{'info'}{'PROJECT_URL'} . "/commits";
    $ret{'info'}{'PROJECT_DL_URL'} = $ret{'info'}{'PROJECT_URL'} . "/releases";
    $ret{'info'}{'PROJECT_WIKI_URL'} = $ret{'info'}{'PROJECT_URL'} . "/wiki";

    $ret{'info'}{'PROJECT_LICENSE'} = $project->{'license'}{'spdx_id'} || '';

    $ret{'info'}{'PROJECT_REPO_SSH'} = $project->{'ssh_url'} || '';
    $ret{'info'}{'PROJECT_REPO_GIT'} = $project->{'git_url'} || '';
    $ret{'info'}{'PROJECT_REPO_HTTP'} = $project->{'clone_url'} || '';

    # Retrieve repository languages
    push( @{$ret{'log'}}, "[Plugins::GitHubProject] Retrieving Languages data." );
    my $langs = $gh->repos->languages;

    # Write languages to json file.
    $repofs->write_input($project_id, "github_project_languages.json",
			  encode_json($langs));

    # Write languages to csv file.
    my $csv = Text::CSV->new({binary => 1, eol => "\n"});
    my @cols = ('language', 'count');
    my $csv_out = join(',', @cols) . "\n";
    
    foreach my $i (keys %$langs) {
        $csv->combine( ($i, $langs->{$i}) );
        $csv_out .= $csv->string();
    }
    
    $repofs->write_output($project_id, "github_project_languages.csv", $csv_out);

    # Retrieve repository contributors
    push( @{$ret{'log'}}, "[Plugins::GitHubProject] Retrieving Contributors data." );
    my $contribs = $gh->repos->contributors;

    # Write contributors to json file on disk.
    $repofs->write_input($project_id, "github_project_contributors.json",
			  encode_json($contribs));

    # Write languages to csv file.
    $csv = Text::CSV->new({binary => 1, eol => "\n"});
    @cols = ('id', 'login', 'contributions', 'html_url');
    $csv_out = join(',', @cols) . "\n";
    
    foreach my $i (@$contribs) {
        my @values = map { $i->{$_} } @cols;
        $csv->combine( @values );
        $csv_out .= $csv->string();
    }
    
    $repofs->write_output($project_id, "github_project_contributors.csv", $csv_out);

    # Retrieve repository tags
    push( @{$ret{'log'}}, "[Plugins::GitHubProject] Retrieving Tags data." );
    my $tags = $gh->repos->tags;

    # Write tags to json file.
    $repofs->write_input($project_id, "github_project_tags.json",
			  encode_json($tags));

    # Write tags to csv file.
    $csv = Text::CSV->new({binary => 1, eol => "\n"});
    @cols = ('name', 'commit_sha', 'zipball_url', 'tarball_url');
    $csv_out = join(',', @cols) . "\n";
    
    foreach my $i (@$tags) {
        $csv->combine( ($i->{'name'}, $i->{'commit'}{'sha'}, 
                        $i->{'zipball_url'}, $i->{'tarball_url'}) );
        $csv_out .= $csv->string();
    }
    
    $repofs->write_output($project_id, "github_project_tags.csv", $csv_out);

    # Retrieve participation stats
    push( @{$ret{'log'}}, "[Plugins::GitHubProject] Retrieving Participation data." );
    my $commits_weekly = $gh->repos->participation();

    # Write punch card to json file.
    $repofs->write_input($project_id, "github_project_commits_weekly.json",
			  encode_json($commits_weekly));

    # Write punch card to csv file.
    $csv = Text::CSV->new({binary => 1, eol => "\n"});
    @cols = ('YearWeek', 'AllCommits', 'OwnerCommits');
    $csv_out = join(',', @cols) . "\n";
    
    for( my $i = 0 ; $i++ ; $i<scalar(@{$commits_weekly->{'all'}}) ) {
        $csv->combine( ($i, $commits_weekly->{'all'}[$i], $commits_weekly->{'owner'}[$i]) );
        $csv_out .= $csv->string();
    }
    
    $repofs->write_output($project_id, "github_project_commits_weekly.csv", $csv_out);

    # Retrieve punch card stats
    push( @{$ret{'log'}}, "[Plugins::GitHubProject] Retrieving Punch Card data." );
    my $commits_hourly = $gh->repos->punch_card();

    # Write punch card to json file.
    $repofs->write_input($project_id, "github_project_commits_hourly.json",
			  encode_json($commits_hourly));

    # Write punch card to csv file.
    $csv = Text::CSV->new({binary => 1, eol => "\n"});
    @cols = ('WeekDay', 'DayTime', 'Commits');
    $csv_out = join(',', @cols) . "\n";
    
    foreach my $i (@$commits_hourly) {
        $csv->combine( ($i->[0], $i->[1], $i->[2]) );
        $csv_out .= $csv->string();
    }
    
    $repofs->write_output($project_id, "github_project_commits_hourly.csv", $csv_out);

    # Retrieve events for repository
    push( @{$ret{'log'}}, "[Plugins::GitHubProject] Retrieving Events data." );
    my @events = $gh->event->repos_events("$gh_user", "$gh_repo");

    # Write tags to json file.
    $repofs->write_input($project_id, "github_project_events.json",
			  encode_json(\@events));

    # Write tags to csv file.
    $csv = Text::CSV->new({binary => 1, eol => "\n"});
    @cols = ('type', 'actor_id', 'actor_login', 'created_at');
    $csv_out = join(',', @cols) . "\n";
    
    foreach my $e (@events) {
        $csv->combine( ($e->{'type'}, $e->{'actor'}{'id'}, $e->{'actor'}{'login'},
                        $e->{'created_at'} || '') );
        $csv_out .= $csv->string();
    }
    
    $repofs->write_output($project_id, "github_project_events.csv", $csv_out);

        
    # Metrics/Info  ###############################################

    # Write static metrics json file to disk.
    $repofs->write_output($project_id, "metrics_github_project.json",
			  encode_json($ret{'metrics'}));

    # Write static metrics csv file to disk.
    my @metrics_def = sort map { $conf{'provides_metrics'}{$_} } keys %{$conf{'provides_metrics'}};
    $csv_out = join(',', @metrics_def) . "\n"; 
    my @values = map { $ret{'metrics'}{$_} } @metrics_def;
    $csv_out .= join(',', @values) . "\n";
    $repofs->write_output($project_id, "metrics_github_project.csv", $csv_out);
    
    # Write info csv file to disk.
    my @info_def = sort @{$conf{'provides_info'}};
    $csv_out = join(',', @info_def) . "\n";
    my @info_values = map { $ret{'info'}{$_} || '' } @info_def; 
    $csv_out .= join(',', @info_values) . "\n";
    $repofs->write_output($project_id, "info_github_project.csv", $csv_out);
    
    # Generate R report ###############################################

    # Now execute the main R script.
    push( @{$ret{'log'}}, "[Plugins::GitHubProject] Executing R main file." );
    my $r = Alambic::Tools::R->new();
    @{$ret{'log'}} = ( @{$ret{'log'}}, @{$r->knit_rmarkdown_inc( 
					     'GitHubProject', $project_id, 'github_project.Rmd', [],
					     { "github.url" => $gh_url, 
					       "github.user" => $gh_user, 
					       "github.repo" => $gh_repo}
					     )} );

    # And execute the figures R scripts.
    my @figs = ('github_project_languages_pie.rmd', 'github_project_contributors_pie.rmd');
    foreach my $fig (sort @figs) { 
	push( @{$ret{'log'}}, "[Plugins::GitHubProject] Executing R fig file [$fig]." );
	@{$ret{'log'}} = ( @{$ret{'log'}}, @{$r->knit_rmarkdown_html( 'GitHubProject', $project_id, $fig )} );
    }
    
    
    return \%ret;
}


1;

=encoding utf8

=head1 NAME

B<Alambic::Plugins::GithubProject> - Retrieves a summary of data for a Github project, along with
SCM information (merge requests, commits, etc.).

=head1 DESCRIPTION

B<Alambic::Plugins::GithubProject> - Retrieves a summary of data for a Github project, along with
SCM information (merge requests, commits, etc.).

Parameters: 

=over

=item * github_url The URL of the remote Github instance, e.g. https://www.github.com.

=item * github_id The ID used to identify the project in the Github forge, 
e.g. bbaldassari/Alambic.

=item * github_token The private token used to access the github instance. 
The private token must be generated by a user who has global rights on all 
analysed projects. It is generated, downloaded and reset from the user's 
account page (/profile/account).

=back

For the complete description of the plugin see the user documentation on the web site: L<https://alambic.io/Plugins/Pre/GithubProject.html>.

=head1 SEE ALSO

L<https://alambic.io/Plugins/Pre/GithubProject.html>,
L<https://github.com>,
L<Mojolicious>, L<http://alambic.io>, L<https://bitbucket.org/BorisBaldassari/alambic>


=cut
