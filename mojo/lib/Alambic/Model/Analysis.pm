package Alambic::Model::Analysis;

use warnings;
use strict;

use Scalar::Util 'weaken';
use Mojo::JSON qw( decode_json encode_json );
use Data::Dumper;


require Exporter;
our @ISA = qw(Exporter);
our @EXPORT_OK = qw( read_all_files
                 get_rules_sources );  


# Constructor
sub new {
    my $class = shift;
    my $app = shift;
    
    my $hash = {app => $app};
    weaken $hash->{app};

    return bless $hash, $class;
}


#
# Read all files in data_input following '*_metrics*.json' and 
# create a single file including all metrics for project.
#
sub analyse_project($) {
    my $self = shift;
    my $project_id = shift;
    
    my $dir_input = $self->{app}->config->{'dir_input'};
    my $dir_projects = $self->{app}->config->{'dir_projects'};

    my %project_values;

    # We read metrics from all files named "*_metrics*.json"
    my @json_metrics_files = <$dir_input/${project_id}/${project_id}*_metrics_*.json>;
    for my $file (@json_metrics_files) {
	print "    - Reading metrics values file from [$file]..\n";    
	
	my $raw_values = &read_data($file);
	
	# We want to be able to read files from bitergia (raw) AND
	# from our scripts (extended).
	if (exists($raw_values->{"name"})) {
	    # Our first, initial format 
	    foreach my $metric (sort keys %{$raw_values->{"children"}}) {
		if ($raw_values->{"children"}->{$metric} =~ m![\d.]+!) {
		    $project_values{uc($metric)} = $raw_values->{"children"}->{$metric};
		} else {
		    if ($raw_values->{"children"}->{$metric} =~ m!^nan$!i) {
			print "DBG nan value for [$metric].\n";
		    } else {
			print "DBG null value for [$metric].\n";
		    }
		}
	    }
	} else {
	    # New, Bitergia format
	    foreach my $metric (keys %{$raw_values}) {
		if ($raw_values->{$metric} =~ m![\d.]+!) {
		    $project_values{uc($metric)} = $raw_values->{$metric};
		    print "DBG metric [$metric] has value [" . $raw_values->{$metric} . "].\n";
		} else {
		    if ($raw_values->{$metric} =~ m!^nan$!i) {
			print "DBG nan value for [$metric].\n";
		    } else {
			print "DBG null value for [$metric].\n";
		    }
		}
	    }        
	}
    }

    # Write all values to a single file.
    my $file_out = $self->{app}->config->{'dir_data'} . '/' . $project_id . '/' . $project_id . '_metrics.json';
    my $local_time = localtime();
    my $out_data = {
	'name' => 'Metrics for project ' . $project_id,
	'version' => 'Generated by Alambic on ' . $local_time,
	'children' => \%project_values
    };
    open(my $fh, '>', $file_out) or die "Could not open file '$file_out' $!";
    print $fh encode_json($out_data);
    close $fh;

    return 1;
}

sub generate_inds {

}


# Utility function to read files
sub read_data($) {
    my $file = shift;

    my $json;
    do { 
        local $/;
        open my $fh, '<', $file or die "Could not open data file [$file].\n";
        $json = <$fh>;
        close $fh;
    };
    my $metrics = decode_json($json);

    return $metrics;
}


1;
