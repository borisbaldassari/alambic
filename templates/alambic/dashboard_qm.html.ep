% layout 'polarsys';
% title 'Dashboard';

            <h2>Project <%= $project_id %></h2>
            <br />

            <div class="tabbable">
              <ul class="nav nav-tabs" role="tablist">
                <li role="presentation"><a href="<%= $project_id %>.html">Summary</a></li>
                <li role="presentation" class="active"><a href="<%= $project_id %>_qm.html">QM</a></li>
                <li role="presentation"><a href="<%= $project_id %>_attrs.html">Attributes</a></li>
                <li role="presentation"><a href="<%= $project_id %>_questions.html">Questions</a></li>
                <li role="presentation"><a href="<%= $project_id %>_metrics.html">Metrics</a></li>
                <li role="presentation"><a href="<%= $project_id %>_practices.html">Practices</a></li>
                <li role="presentation" class="dropdown">
                  <a class="dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-expanded="false">Download <span class="caret"></span></a>
                  <ul class="dropdown-menu" role="menu">
                    <li role="presentation"><a href="/data/<%= $project_id %>_attributes.json">Attributes JSON</a></li>
                    <li role="presentation"><a href="/data/<%= $project_id %>_attributes.csv">Attributes CSV</a></li>
                    <li role="presentation"><a href="/data/<%= $project_id %>_questions.json">Questions JSON</a></li>
                    <li role="presentation"><a href="/data/<%= $project_id %>_questions.csv">Questions CSV</a></li>
                    <li role="presentation"><a href="/data/<%= $project_id %>_metrics.json">Metrics JSON</a></li>
                    <li role="presentation"><a href="/data/<%= $project_id %>_metrics.csv">Metrics CSV</a></li>
                    <li role="presentation"><a href="/data/<%= $project_id %>_pmd.zip">PMD results XML</a></li>
                    <li role="presentation"><a href="/data/<%= $project_id %>_findbugs.zip">FindBugs results XML</a></li>
                  </ul>
                </li>
                <li role="presentation"><a href="<%= $project_id %>_log.html">Errors</a></li>
              </ul>
            </div>

            <br />            

            <h3>The Quality model</h3>
            
            <p>The quality model shows the complete hierarchy tree, from <a href="/documentation/attributes.html">quality attributes</a> to <a href="/documentation/questions.html">measurement concepts</a> (questions) and <a href="/documentation/metrics.html">metrics</a>. Following Basili's Goal-Question-Metric approach [<a href="/documentation/references.html#Basili1994">Basili1994</a>], the quality attributes (the 3 first columns) are goals for our measurement, concepts (4th col) are mapped to questions, and metrics (right col) are the base measures.</p>

            <div class="row">
              <div class="col-lg-7">
        
                <div id="tree"></div>

                <script src="/js/d3/d3.min.js"></script>
                <script>
var margin = {top: 20, right: 120, bottom: 20, left: 10},
    width = 1100 - margin.right - margin.left,
    height = 1024 - margin.top - margin.bottom;
    
var i = 0,
    duration = 750,
    root;

var tree = d3.layout.tree()
    .size([height, width]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

var svg = d3.select("div#tree").append("svg")
    .attr("width", width + margin.right + margin.left)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var mycolours = ["#ebebeb", "#FFFF66", "#CCF24D", "#99E633", "#66D91A", "#33CC00"];

var myattrs = {};
var mymetrics = {};
var myconcepts = {};
var myvalues = new Object();

// Load file for attributes.
d3.json("/data/model_attributes.json", function(error, attributes) {
  if (error) return console.warn(error);

  for(i=0;i<attributes.children.length;i++) {
    attr_mnemo = attributes.children[i]['mnemo'];
    myattrs[attr_mnemo] = attributes.children[i];
  }
});

// Load file for concepts.
d3.json("/data/model_questions.json", function(error, concepts) {
  if (error) return console.warn(error);
  
  for(i=0;i<concepts.children.length;i++) {
    concept_name = concepts.children[i].mnemo;
    myconcepts[concept_name] = concepts.children[i];
  }
});

// Load file for metrics.
d3.json("/data/model_metrics.json", function(error, metrics) {
  if (error) return console.warn(error);
  
  for(i=0;i<metrics.children.length;i++) {
    metric_name = metrics.children[i].mnemo;
    mymetrics[metric_name] = metrics.children[i];
  }
});

d3.json("/data/<%= $project_id %>_qm.json", function(error, qm) {
  if (error) return console.warn(error);

  root = qm;
  root.x0 = height / 2;
  root.y0 = 0;

  function collapse(d) {
    if (d.children) {
      d._children = d.children;
      d._children.forEach(collapse);
      d.children = null;
    }
  }

  update(root);
});

function update(source) {

  var tabs = [0, 100, 200, 400, 630, 700];

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse(),
      links = tree.links(nodes);

  // Normalize for fixed-depth.
  nodes.forEach(function(d, i) { 
    d.y = tabs[d.depth];
  });

  // Update the nodes…
  var node = svg.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .on("click", click);

  nodeEnter.append("circle")
      .attr("r", 1e-6)
      .style("fill", function(d) { 
        return d.ind ? mycolours[Math.floor(d.ind)] : "gray"; 
      })
      .style("stroke", function(d) {
	  return "black";
	  //return d.ind ? mycolours[d.ind] : "gray"; 
      });

  nodeEnter.append("text")
      .attr("x", function(d) { return d.children || d._children ? -15 : 20; })
      .attr("dy", function(d) { return d.children || d._children ? "-0.5em" : ".35em" })
      .attr("text-anchor", function(d) { return d.children || d.children ? "end" : "start"; })
      .attr("fill", function(d) { return d.active == "true" ? "black" : "gray";})
      .text(function(d) { 
        value = d.value ? d.value + " / " : "";
	ind = d.ind ? " (" + value + d.ind + ")" : "";
	return d.name + ind;
      })
      .style("fill-opacity", 1e-6);

  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

  nodeUpdate.select("circle")
      .attr("r", 7)
      .style("fill", function(d) { 
        return d.ind ? mycolours[Math.floor(d.ind)] : "lightgray"; 
      })
      .style("stroke", function(d) {
	  return "black";
      });

  nodeUpdate.select("text")
      .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position. '
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .remove();

  nodeExit.select("circle")
      .attr("r", 1e-6);

  nodeExit.select("text")
      .style("fill-opacity", 1e-6);

  // Update the links…
  var link = svg.selectAll("path.link")
      .data(links, function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position. '
  link.enter().insert("path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      });

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position. '
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

// Toggle children on click.
function click(d) {

  var i = 0;
  var mynode;

  // find element in our json files (metrics, concepts, attributes of quality).
  if (typeof d.type == "undefined") {
    alert("No type defined on node.");
  } else {
    if (d.type == "metric") {
      mynode = d;
      mynode.description = mymetrics[d.mnemo]["desc"]; 
      mynode.name = mymetrics[d.mnemo]["name"]; 
      mynode.datasource = mymetrics[d.mnemo]["ds"]; 
      var mydiv = d3.select("div#details-box-project");

      mydiv.text("");

      var ptitle = mydiv.append('p');
      ptitle.classed("title", true);
      var mytitlehtml = d.type.charAt(0).toUpperCase() + d.type.slice(1) + ": " + mynode.name + " (" + mynode.mnemo + ")";
      mytitlehtml += ' &nbsp; <a href="/documentation/metrics.html#' + mynode.mnemo + '">More info <i class="fa fa-external-link"></i></a>';
      ptitle.html(mytitlehtml); 
  
      p = mydiv.append('p');
      p.classed("details", true); 
      p.html('<div class="row"><div class="col-sm-6"><b>Active:</b> ' + mynode.active.charAt(0).toUpperCase() + mynode.active.slice(1) + ' &nbsp; </div><div class="col-sm-6"><b>Value:</b> ' + d.value + '</div></div>');

      p = mydiv.append('p');
      p.classed("details", true); 
      var mycolour = d.ind ? mycolours[Math.floor(d.ind)] : "gray";
      p.html('<div class="row"><div class="col-sm-6"><b>Data source</b>: ' + mynode.datasource + ' &nbsp; </div><div class="col-sm-6"><b>Computed indicator:</b> <span class="label label-scale" style="background-color: ' + mycolour + '"> ' + d.ind + " </span></div></div>");

      pdesct = mydiv.append('p');
      pdesct.classed("details", true); 
      pdesct.html("<b>Description</b>:")
      for (desc_idx = 0 ; desc_idx < mynode.description.length ; desc_idx++) {
          var pdesc = mydiv.append('p');
          pdesc.classed("details", true);
          pdesc.html(mynode.description[desc_idx]);
      }
    } else if (d.type == "concept") {
      mynode = d;
      mynode.description = myconcepts[d.mnemo]["desc"]; 
      mynode.name = myconcepts[d.mnemo]["name"]; 
      mynode.question = myconcepts[d.mnemo]["question"]; 

      var mydiv = d3.select("div#details-box-project");

      mydiv.text("");

      var ptitle = mydiv.append('p');
      ptitle.classed("title", true);
      mytitlehtml = d.type.charAt(0).toUpperCase() + d.type.slice(1) + ": " + mynode.name + " (" + mynode.mnemo + ")";
      mytitlehtml += ' &nbsp; <a href="/documentation/questions.html#' + mynode.mnemo + '">More info <i class="fa fa-external-link"></i></a>';
      ptitle.html(mytitlehtml); 
  
      p = mydiv.append('p');
      p.classed("details", true); 
      var mycolour = d.ind ? mycolours[Math.floor(d.ind)] : "gray";
      p.html('<div class="row"><div class="col-sm-6"><b>Active:</b> ' + mynode.active.charAt(0).toUpperCase() + mynode.active.slice(1) + ' &nbsp; </div><div class="col-sm-6"><b>Value:</b> <span class="label label-scale" style="background-color: ' + mycolour + '"> ' + d.ind + " </span></div></div>");

      pdesct = mydiv.append('p');
      pdesct.classed("details", true); 
      pdesct.html("<b>Question:</b><br />" + mynode.question);
      
      pdesct = mydiv.append('p');
      pdesct.classed("details", true); 
      pdesct.html("<b>Description:</b>")
      for (desc_idx = 0 ; desc_idx < mynode.description.length ; desc_idx++) {
          var pdesc = mydiv.append('p');
          pdesc.classed("details", true);
          pdesc.html(mynode.description[desc_idx]);
      }
    } else if (d.type == "attribute") {
      mynode = d;
      mynode.description = myattrs[d.mnemo]["desc"]; 
      mynode.name = myattrs[d.mnemo]["name"]; 

      var mydiv = d3.select("div#details-box-project");

      mydiv.text("");

      var ptitle = mydiv.append('p');
      ptitle.classed("title", true);
      mytitlehtml = d.type.charAt(0).toUpperCase() + d.type.slice(1) + ": " + mynode.name + " (" + mynode.mnemo + ")";
      mytitlehtml += ' &nbsp; <a href="/documentation/attributes.html#' + mynode.mnemo + '">More info <i class="fa fa-external-link"></i></a>';
      ptitle.html(mytitlehtml); 
  
      p = mydiv.append('p');
      p.classed("details", true); 
      var mycolour = d.ind ? mycolours[Math.floor(d.ind)] : "gray";
      p.html('<div class="row"><div class="col-sm-6"><b>Active:</b> ' + mynode.active.charAt(0).toUpperCase() + mynode.active.slice(1) + ' &nbsp; </div><div class="col-sm-6"><b>Value:</b> <span class="label label-scale" style="background-color: ' + mycolour + '"> ' + d.ind + ' </span></div></div>');      

      pdesct = mydiv.append('p');
      pdesct.classed("details", true); 
      pdesct.html("<b>Description:</b>")
      for (desc_idx = 0 ; desc_idx < mynode.description.length ; desc_idx++) {
          var pdesc = mydiv.append('p');
          pdesc.classed("details", true);
          pdesc.text(mynode.description[desc_idx]);
      }
    
    }
  }
}

                </script>
              </div>
              <div class="col-lg-5">
                <div id="details-box-project"><p>Click on a node to get more details.</p></div>
              </div> <!-- col -->
            </div> <!-- row -->
